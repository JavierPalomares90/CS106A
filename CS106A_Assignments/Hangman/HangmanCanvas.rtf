{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red15\green114\blue3;\red255\green255\blue255;\red10\green82\blue135;
\red217\green217\blue217;\red0\green0\blue255;\red251\green0\blue129;\red109\green109\blue109;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl260

\f0\fs24 \cf2 \cb3 /*\cf0 \
\'a0\cf2 * File: HangmanCanvas.java\cf0 \
\'a0\cf2 * ------------------------\cf0 \
\'a0\cf2 * This file keeps track of the Hangman display.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\
import java.awt.Color;\
import java.util.ArrayList;\
\'a0\
import acm.graphics.*;\
\'a0\
\pard\pardeftab720\sl260

\f1\b \cf4 \cb5 public
\f0\b0 \cf0  
\f1\b \cf4 class
\f0\b0 \cf0  HangmanCanvas extends GCanvas \{\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Awesome. However, I would make a lot more constants. You use the same expressions over and over again (getWidth()/2, getHeight()-SCAFFOLD_HEIGHT, etc). You should just make constants for them.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\
\'a0\'a0\'a0\'a0\cf2 /** \cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Sets the display so that only the scaffold appers\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  reset() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0removeAll();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawScaffold();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Adds the scaffold \cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawScaffold()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine scaffold = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2 - BEAM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2, getWidth() / 2 - BEAM_LENGTH, (getHeight() + SCAFFOLD_HEIGHT) / 2);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0scaffold.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(scaffold);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine beam = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2 - BEAM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2, getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0beam.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(beam);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine rope = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2, getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT)/2 + ROPE_LENGTH );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0rope.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(rope);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the head \cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawHead()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GOval head = 
\f1\b \cf4 new
\f0\b0 \cf0  GOval( getWidth() / 2 - HEAD_RADIUS, (getHeight() - SCAFFOLD_HEIGHT) / 2 + ROPE_LENGTH, 2 * HEAD_RADIUS, 2 * HEAD_RADIUS);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0head.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(head);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the body\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawBody()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine body = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine (getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + ROPE_LENGTH + 2 * HEAD_RADIUS, getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0body.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(body);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the left arm\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawLeftArm()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine bicep = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, getWidth() / 2 - UPPER_ARM_LENGTH , (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine forearm = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2 - UPPER_ARM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, getWidth() / 2 - UPPER_ARM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bicep.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0forearm.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(bicep);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(forearm);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * draws the right Arm\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawRightArm()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine bicep = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, getWidth() / 2 + UPPER_ARM_LENGTH , (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine forearm = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2 + UPPER_ARM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, getWidth() / 2 + UPPER_ARM_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bicep.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0forearm.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(bicep);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(forearm);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the right leg\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawLeftLeg()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine hip = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH, getWidth() / 2 - HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0hip.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(hip);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine leg = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2 - HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH, getWidth() / 2 - HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0leg.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(leg);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the right leg\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawRightLeg()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine hip = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH, getWidth() / 2 + HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0hip.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(hip);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine leg = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine( getWidth() / 2 + HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH, getWidth() / 2 + HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0leg.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(leg);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the left foot\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawLeftFoot()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine foot = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2 - HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, getWidth() / 2 - HIP_WIDTH - FOOT_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0foot.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(foot);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Draws the right foot\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  drawRightFoot()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine foot = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(getWidth() / 2 + HIP_WIDTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, getWidth() / 2 + HIP_WIDTH + FOOT_LENGTH, (getHeight() - SCAFFOLD_HEIGHT) / 2 + 2 * HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0foot.setColor(Color.black);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(foot);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Updates the word on the screen to correspond to the current\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * state of the game.\'a0 The argument string shows what letters have\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * been guessed so far; unguessed letters are indicated by hyphens.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  displayWord(String word) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLabel label= 
\f1\b \cf4 new
\f0\b0 \cf0  GLabel(word);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setFont(\cf6 "Comic Sans -16"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setLocation(( getWidth() - label.getWidth() ) / 2, getHeight() - label.getHeight());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GObject oldWord=getElementAt(label.getX() + label.getWidth()/2 , label.getY());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (oldWord != null) \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf7 remove
\f0\b0 \cf0 (oldWord);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(label);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 // Declares a string that will contain wrong guesses\cf0 \
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  String wrongLetters= \cf6 ""\cf0 ;\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Put instance variables at the top.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\cf2 * Updates the display to correspond to an incorrect guess by the\cf0 \
\'a0\'a0\'a0\'a0\cf2 * user.\'a0 Calling this method causes the next body part to appear\cf0 \
\'a0\'a0\'a0\'a0\cf2 * on the scaffold and adds the letter to the list of incorrect\cf0 \
\'a0\'a0\'a0\'a0\cf2 * guesses that appears at the bottom of the window.\cf0 \
\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  noteIncorrectGuess(
\f1\b \cf8 char
\f0\b0 \cf0  letter, 
\f1\b \cf8 int
\f0\b0 \cf0  numTries, ArrayList<Character> wrongGuesses, ArrayList<Character> correctGuesses)\{\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (!wrongGuesses.contains(letter) && !correctGuesses.contains(letter))\{\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Nice checking for wrong guesses!\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0wrongLetters += \cf6 " "\cf0  + letter;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0wrongGuesses.add(letter);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLabel label = 
\f1\b \cf4 new
\f0\b0 \cf0  GLabel (\cf6 "Your wrong guesses are: "\cf0  + wrongLetters);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setLocation(0,label.getAscent());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GObject oldLabel = getElementAt(label.getX(), label.getY());\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0  (oldLabel != null)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf7 remove
\f0\b0 \cf0 (oldLabel);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(label);\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Instead of removing and adding, you can just use setLabel\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0addNextBodyPart(numTries);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Adds the next\'a0 body part on the display\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * @param numTries is the current number of tries the user has left\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  addNextBodyPart(
\f1\b \cf8 int
\f0\b0 \cf0  numTries)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 7)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawHead();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 6)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawBody();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 5)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawLeftArm();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 4)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawRightArm();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 3)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawLeftLeg();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 2)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawRightLeg();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 1)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawLeftFoot();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (numTries == 0)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0drawRightFoot();\
\'a0\'a0\'a0\'a0\}\
\'a0\
\pard\pardeftab720\sl260
\cf2 /* Constants for the simple version of the picture (in pixels) */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  SCAFFOLD_HEIGHT = 360;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  BEAM_LENGTH = 144;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  ROPE_LENGTH = 18;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  HEAD_RADIUS = 36;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  BODY_LENGTH = 144;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  ARM_OFFSET_FROM_HEAD = 28;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  UPPER_ARM_LENGTH = 72;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  LOWER_ARM_LENGTH = 44;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  HIP_WIDTH = 36;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  LEG_LENGTH = 108;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 static
\f0\b0 \cf0  final 
\f1\b \cf8 int
\f0\b0 \cf0  FOOT_LENGTH = 28;\
\'a0\
}