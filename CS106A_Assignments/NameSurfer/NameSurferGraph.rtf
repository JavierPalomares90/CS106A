{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red15\green114\blue3;\red255\green255\blue255;\red10\green82\blue135;
\red217\green217\blue217;\red109\green109\blue109;\red0\green0\blue255;\red251\green0\blue129;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl260

\f0\fs24 \cf2 \cb3 /*\cf0 \
\'a0\cf2 * File: NameSurferGraph.java\cf0 \
\'a0\cf2 * ---------------------------\cf0 \
\'a0\cf2 * This class represents the canvas on which the graph of\cf0 \
\'a0\cf2 * names is drawn. This class is responsible for updating\cf0 \
\'a0\cf2 * (redrawing) the graphs whenever the list of entries changes\cf0 \
\'a0\cf2 * or the window is resized.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\
import acm.graphics.*;\
\'a0\
import java.awt.event.*;\
import java.util.*;\
import java.awt.*;\
\'a0\
\'a0\
\pard\pardeftab720\sl260

\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 class
\f0\b0 \cf0  NameSurferGraph extends GCanvas\
\'a0\'a0\'a0\'a0implements NameSurferConstants, ComponentListener \{\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 // Hold names to graph\cf0 \
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  ArrayList<NameSurferEntry> namesToGraph;\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Declare this as just a List<NameSurferEntry>\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Creates a new NameSurferGraph object that displays the data.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  NameSurferGraph() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0addComponentListener(
\f1\b \cf4 this
\f0\b0 \cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0namesToGraph = 
\f1\b \cf4 new
\f0\b0 \cf0  ArrayList<NameSurferEntry>();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0addMargins();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Adds margins and Columns to the Graph\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  addMargins()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine bottom = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(0, getHeight() - GRAPH_MARGIN_SIZE, getWidth(), getHeight() - GRAPH_MARGIN_SIZE);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine top = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(0, GRAPH_MARGIN_SIZE, getWidth(), GRAPH_MARGIN_SIZE);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(bottom);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(top);\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 double
\f0\b0 \cf0  dx = getWidth() / NDECADES;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 for
\f0\b0 \cf0  (
\f1\b \cf6 int
\f0\b0 \cf0  i = 0; i < NDECADES; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine column = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(dx * i, 0, dx * i, getHeight());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 int
\f0\b0 \cf0  year = START_DECADE + 10 * i;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLabel label = 
\f1\b \cf4 new
\f0\b0 \cf0  GLabel(\cf7 ""\cf0  + year + \cf7 ""\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setLocation(dx * i, getHeight());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(column);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(label);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Add more inline comments.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Clears the list of name surfer entries stored inside this class.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  clear() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0namesToGraph.clear();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Adds a new NameSurferEntry to the list of entries on the display.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Note that this method does not actually draw the graph, but\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * simply stores the entry; the graph is drawn by calling update.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  addEntry(NameSurferEntry entry) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (!namesToGraph.contains(entry))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0namesToGraph.add(entry);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Removes a NameSurferEntry from the list of entries on the display\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * @param entry is the entry to remove.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  removeEntry(NameSurferEntry entry)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0namesToGraph.
\f1\b \cf8 remove
\f0\b0 \cf0 (entry);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Updates the display image by deleting all the graphical objects\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * from the canvas and then reassembling the display according to\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * the list of entries. Your application must call update after\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * calling either clear or addEntry; update is also called whenever\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * the size of the canvas changes.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  update() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0removeAll();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0addMargins();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 double
\f0\b0 \cf0  dx = getWidth() / NDECADES;\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 double
\f0\b0 \cf0  y = 0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 double
\f0\b0 \cf0  nextY;\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Comment what you're doing here!\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 int
\f0\b0 \cf0  colorCounter = 0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 for
\f0\b0 \cf0 (NameSurferEntry entry : namesToGraph)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Color lineColor = getLineColor(colorCounter);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorCounter++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Cycles colors\cf0 \
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (colorCounter == 4)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorCounter = 0;\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Or, could just use colorCounter % 4\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 for
\f0\b0 \cf0  (
\f1\b \cf6 int
\f0\b0 \cf0  i = 0 ; i < NDECADES; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf6 int
\f0\b0 \cf0  rank = entry.getRank(i);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nextY = rank / MAX_RANK * (getHeight() - 2 * GRAPH_MARGIN_SIZE) + GRAPH_MARGIN_SIZE;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Sets rank 0 to the bottom of the plot\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 ( rank == 0)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nextY = getHeight() - GRAPH_MARGIN_SIZE;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLine ln = 
\f1\b \cf4 new
\f0\b0 \cf0  GLine(dx * (i - 1), y , dx * i, nextY);\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 But the first y is 0. So the first value will always be messed up.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0ln.setColor(lineColor);\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0GLabel label = 
\f1\b \cf4 new
\f0\b0 \cf0  GLabel(entry.getName() + \cf7 " "\cf0  + rank);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setFont(\cf7 "Comic Sans -12"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setColor(lineColor);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0label.setLocation(dx * i, nextY);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(ln);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(label);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0y = nextY;\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Use some spacing here to group logical blocks of code together.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Returns a color for the line\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * @param i is the index to return a color\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * @return the color\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  Color getLineColor(
\f1\b \cf6 int
\f0\b0 \cf0  i)\{\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Color[] colorField = 
\f1\b \cf4 new
\f0\b0 \cf0  Color[4];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorField[0] = Color.blue;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorField[1] = Color.red;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorField[2] = Color.green;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0colorField[3] = Color.black;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 return
\f0\b0 \cf0  colorField[i];\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 You don't need to create a whole array every time! Just have a switch/case, and return the color you need!\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /* Implementation of the ComponentListener interface */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  componentHidden(ComponentEvent e) \{ \}\
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  componentMoved(ComponentEvent e) \{ \}\
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  componentResized(ComponentEvent e) \{ update(); \}\
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  componentShown(ComponentEvent e) \{ \}\
\}\
}