{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red15\green114\blue3;\red255\green255\blue255;\red10\green82\blue135;
\red251\green0\blue129;\red217\green217\blue217;\red0\green0\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl260

\f0\fs24 \cf2 \cb3 /*\cf0 \
\'a0\cf2 * File: NameSurfer.java\cf0 \
\'a0\cf2 * ---------------------\cf0 \
\'a0\cf2 * This program implements the viewer for\cf0 \
\'a0\cf2 * the baby-name database described in the assignment handout.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\
import acm.program.*;\
import java.awt.event.*;\
\'a0\
\'a0\
import javax.swing.*;\
\'a0\
\pard\pardeftab720\sl260

\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 class
\f0\b0 \cf0  NameSurfer extends Program implements NameSurferConstants \{\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 // Private instance objects\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  JButton clear;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  JButton grapher;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  JButton 
\f1\b \cf5 remove
\f0\b0 \cf0 ;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  JTextField nameInput;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  NameSurferGraph graph;\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  NameSurferDataBase data;\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * This method has the responsibility for reading in the data base\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * and initializing the interactors at the top of the window.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  init() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0addButtons();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph = 
\f1\b \cf4 new
\f0\b0 \cf0  NameSurferGraph();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0data = 
\f1\b \cf4 new
\f0\b0 \cf0  NameSurferDataBase(NAMES_DATA_FILE);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(graph);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * Add buttons for user interface.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\pard\pardeftab720\sl260
\cf0 \cb6 \'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  addButtons()\{\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Good.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\pard\pardeftab720\sl260
\cf0 \cb6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0JLabel label = 
\f1\b \cf4 new
\f0\b0 \cf0  JLabel(\cf7 "Name"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0clear = 
\f1\b \cf4 new
\f0\b0 \cf0  JButton(\cf7 "Clear"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0clear.setActionCommand(\cf7 "Clear"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0clear.addActionListener(
\f1\b \cf4 this
\f0\b0 \cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0grapher = 
\f1\b \cf4 new
\f0\b0 \cf0  JButton(\cf7 "Graph"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0grapher.setActionCommand(\cf7 "Graph"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0grapher.addActionListener(
\f1\b \cf4 this
\f0\b0 \cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nameInput = 
\f1\b \cf4 new
\f0\b0 \cf0  JTextField(NUM_COLUMNS);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nameInput.setActionCommand(\cf7 "Graph"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0nameInput.addActionListener(
\f1\b \cf4 this
\f0\b0 \cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 remove
\f0\b0 \cf0  = 
\f1\b \cf4 new
\f0\b0 \cf0  JButton(\cf7 "Remove"\cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 remove
\f0\b0 \cf0 .setActionCommand(\cf7 "Remove"\cf0 );\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Make the strings constants!\
Remove button is awesome. :)\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 remove
\f0\b0 \cf0 .addActionListener(
\f1\b \cf4 this
\f0\b0 \cf0 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(label, NORTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(nameInput, NORTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(grapher, NORTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(clear, NORTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add(
\f1\b \cf5 remove
\f0\b0 \cf0 , NORTH);\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 /**\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * This class is responsible for detecting when the buttons are\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * clicked, so you will have to define a method to respond to\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 * button actions.\cf0 \
\'a0\'a0\'a0\'a0\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  actionPerformed(ActionEvent e) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0 (e.getActionCommand().equals(\cf7 "Clear"\cf0 ))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.clear();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.update();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}
\f1\b \cf4 else
\f0\b0 \cf0  
\f1\b \cf4 if
\f0\b0 \cf0  (e.getActionCommand().equals(\cf7 "Graph"\cf0 ))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0String nameToPlot = nameInput.getText();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0NameSurferEntry nameEntry = data.findEntry(nameToPlot);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.addEntry(nameEntry);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.update();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}
\f1\b \cf4 else
\f0\b0 \cf0  
\f1\b \cf4 if
\f0\b0 \cf0  (e.getActionCommand().equals(\cf7 "Remove"\cf0 ))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0String nameToRemove = nameInput.getText();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0NameSurferEntry nameEntry = data.findEntry(nameToRemove);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.removeEntry(nameEntry);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0graph.update();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\}\
\}\
}