{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red15\green114\blue3;\red255\green255\blue255;\red0\green0\blue0;
\red10\green82\blue135;\red217\green217\blue217;\red109\green109\blue109;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth18200\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl260

\f0\fs24 \cf2 \cb3 /*\cf0 \
\'a0\cf2 * File: StoneMasonKarel.java\cf0 \
\'a0\cf2 * --------------------------\cf0 \
\'a0\cf2 * The StoneMasonKarel subclass will repair the quad with \cf0 \
\'a0\cf2 * columns of any length as long as the columns of the quad \cf0 \
\'a0\cf2 * are 4 units apart and that the final column is immediately followed by a wall.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\
import stanford.karel.*;\
\'a0\
\pard\intbl\itap1\pardeftab720\sl260

\f1\b \cf5 public
\f0\b0 \cf0  
\f1\b \cf5 class
\f0\b0 \cf0  StoneMasonKarel extends SuperKarel \{\
\'a0\'a0\'a0\'a0
\f1\b \cf5 public
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  run()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0RepairQuad();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\pard\intbl\itap1\pardeftab720\sl260
\cf2 /* Precondition: Karel is at the bottom of the first column\cf0 \
\'a0\cf2 * Postcondition: Karel is at the bottom of the last column \cf0 \
\'a0\cf2 * and the columns are repaired \cf0 \
\'a0\cf2 */\cf0 \
\pard\intbl\itap1\pardeftab720\sl260
\cf0 \cb6 \'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  RepairQuad()\{\
\pard\intbl\itap1\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 camelCase method names.\
\pard\intbl\itap1\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\intbl\itap1\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 while
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0repairColumn();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0moveToNextColumn();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0repairColumn();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\pard\intbl\itap1\pardeftab720\sl260
\cf2 /* Repairs columns of any height\cf0 \
\'a0\cf2 * Precondition: Karel is positioned at the bottom of a column.\cf0 \
\'a0\cf2 * Postcondition: Karel returns to the bottom of a column and the\cf0 \
\'a0\cf2 * column is repaired.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  repairColumn()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnLeft();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0climbColumn();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnAround();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0descendColumn();\
\pard\intbl\itap1\pardeftab720\sl260
\cf0 \cb6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\pard\intbl\itap1\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Tabbing.\
\pard\intbl\itap1\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\intbl\itap1\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\
\pard\intbl\itap1\pardeftab720\sl260
\cf2 /* Precondition: Karel is at the bottom of the column.\cf0 \
\'a0\cf2 * Postcondtion: Karel is at the top of the column and it has been \cf0 \
\'a0\cf2 * repaired.\'a0\'a0\'a0 \cf0 \
\'a0\cf2 */\cf0 \
\pard\intbl\itap1\pardeftab720\sl260
\cf0 \cb6 \'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  climbColumn()\{\
\pard\intbl\itap1\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 This is just great decomposition. Keep it up!\
\pard\intbl\itap1\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\intbl\itap1\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 while
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0fixBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0fixBeeper();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\pard\intbl\itap1\pardeftab720\sl260
\cf2 /*Precondition: Karel is on a column's block\cf0 \
\'a0\cf2 * Postcondition: Karel puts a beeper on the block if it's broken\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  fixBeeper()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 if
\f0\b0 \cf0  (noBeepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0putBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /* Precondition: Karel is at the top of the column.\cf0 \
\'a0\cf2 * Postcondition: Karel is at the bottom of the column facing east\'a0 \cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  descendColumn()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 while
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnLeft();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /*\'a0 Moves Karel to the next Column.\cf0 \
\'a0\cf2 *\'a0 Precondition: Karel is at a column. Columns are 4 blocks apart.\cf0 \
\'a0\cf2 *\'a0 Postcondition: Karel is at the next column.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0 \cf0  
\f1\b \cf5 void
\f0\b0 \cf0  moveToNextColumn()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 if
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 for
\f0\b0 \cf0  (
\f1\b \cf7 int
\f0\b0 \cf0  i=0; i<4; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\}\cell \lastrow\row
}