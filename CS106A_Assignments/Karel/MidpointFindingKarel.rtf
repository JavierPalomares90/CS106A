{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red15\green114\blue3;\red255\green255\blue255;\red10\green82\blue135;
\red217\green217\blue217;\red251\green0\blue7;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl260

\f0\fs24 \cf2 \cb3 /*\cf0 \
\'a0\cf2 * File: MidpointFindingKarel.java\cf0 \
\'a0\cf2 * -------------------------------\cf0 \
\'a0\cf2 * MidpointFindingKarel leaves a beeper on the center corner of First\cf0 \
\'a0\cf2 * Street, or the leftmost center corner if First Street has an even\cf0 \
\'a0\cf2 * number of corners. In the comments, a "walkable path" by Karel is \cf0 \
\'a0\cf2 * free of beepers. \cf0 \
\'a0\cf2 */\cf0 \
\'a0\
import stanford.karel.*;\
\'a0\
\pard\pardeftab720\sl260

\f1\b \cf4 \cb5 public
\f0\b0 \cf0  
\f1\b \cf4 class
\f0\b0 \cf0  MidpointFindingKarel extends SuperKarel \{\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Good solution that's decomposed very well. Another similar solution that may be easier to code up is actually to put beepers down along the entire first row, then start picking them up from the ends. There are also a few more that are extremely elegant.\
There are some edge cases that fail, detailed below.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\
\'a0\'a0\'a0\'a0
\f1\b \cf4 public
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  run()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0findMidpoint();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0pickUpBeepers();\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\}\
\pard\pardeftab720\sl260\sa240

\f2 \cf0 \cb3 Karel should return to the middle when done.\
\pard\pardeftab720\sl220

\i\fs20 \cf0 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf0 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  findMidpoint()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 while
\f0\b0 \cf0  (noBeepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0walktoMidpoint();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\}\
\'a0\
\pard\pardeftab720\sl260
\cf2 /* Puts beepers down in a way so that the last Beeper put marks\cf0 \
\'a0\cf2 * the center corner of First Street.\cf0 \
\'a0\cf2 * Precondition: Karel is on First Street.\cf0 \
\'a0\cf2 * Postcondition: Karel is on the midpoint of First Street and there\cf0 \
\'a0\cf2 * is a beeper on every corner of First Street\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  walktoMidpoint()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0walkAlongPath();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0putBeeperAtEndsofStreet();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0putBeeperAtEndsofPath();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /* Precondition: Karel is on a corner of a street that has no beepers\cf0 \
\'a0\cf2 * Postcondition: Karel will stop at the end of its path \cf0 \
\'a0\cf2 *\'a0 \cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  walkAlongPath()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 while
\f0\b0 \cf0  (noBeepersPresent() && frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /*\'a0 Precondition: Karel is at the end of its path\cf0 \
\'a0\cf2 *\'a0 Postcondition: Karel turns away from the end of the \cf0 \
\'a0\cf2 *\'a0 path and marks it by putting a beeper in front of it\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  putBeeperAtEndsofStreet()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0  (frontIsBlocked() && noBeepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0putBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnAround();\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\pard\pardeftab720\sl260\sa240

\f2 \cf6 \cb3 This line makes Karel crash on a 1x1 world.\
\pard\pardeftab720\sl220

\i\fs20 \cf6 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf6 \
\pard\pardeftab720\sl260
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\pard\pardeftab720\sl260
\cf2 /* Precondition: Karel is on its walkable path.\cf0 \
\'a0\cf2 * Postcondition: Karel marks the ends of its walkable path by\cf0 \
\'a0\cf2 * putting beepers in front.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  putBeeperAtEndsofPath()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0  (beepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnAround();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0putBeeper();\
\pard\pardeftab720\sl260
\cf0 \cb5 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\pard\pardeftab720\sl260\sa240

\f2 \cf6 \cb3 This line makes Karel crash on a 2x2 world.\
\pard\pardeftab720\sl220

\i\fs20 \cf6 Lekan Wang (lekanw)\
\pard\pardeftab720\sl260

\f0\i0\fs24 \cf6 \
\pard\pardeftab720\sl260
\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\pard\pardeftab720\sl260
\cf2 /* Picks up all the beepers that were put in order to find the midpoint \cf0 \
\'a0\cf2 * of First Street except for the beeper that marks the midpoint.\cf0 \
\'a0\cf2 * Precondition: Karel is on the midpoint and there's a beeper on every\cf0 \
\'a0\cf2 * corner.\cf0 \
\'a0\cf2 * Postcondition: A single beeper remains marking the midpoint.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  pickUpBeepers()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0takeBeepers();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0goToRestOfBeepers();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0skipMidpointBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0takeRestOfBeepers();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /* Precondition: Karel is on a corner.\cf0 \
\'a0\cf2 * Postcondition: Karel pick the beeper if there was on on the \cf0 \
\'a0\cf2 * corner and will move to the next corner and repeat until\cf0 \
\'a0\cf2 * it hits a wall\'a0\'a0 \cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  takeBeepers()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 while
\f0\b0 \cf0  (beepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0pickBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 else
\f0\b0 \cf0  \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0turnAround();\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0 \
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /* Precondition: Karel is on the end of a street.\cf0 \
\'a0\cf2 * Postcondition: Karel is at the next section of Beepers ready \cf0 \
\'a0\cf2 * to pick them up. \cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  goToRestOfBeepers()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 while
\f0\b0 \cf0  (noBeepersPresent() & frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /*\'a0 Precondition: Karel is at the next section of beepers\cf0 \
\'a0\cf2 *\'a0 Postcondition: Karel will skip the beeper which marks the midpoint.\cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  skipMidpointBeeper()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\
\cf2 /* Precondition: Karel is after the midpoint beeper.\cf0 \
\'a0\cf2 * Postcondition: Karel will pick up the rest of the beepers\'a0\'a0\'a0 \cf0 \
\'a0\cf2 */\cf0 \
\'a0\'a0\'a0\'a0
\f1\b \cf4 private
\f0\b0 \cf0  
\f1\b \cf4 void
\f0\b0 \cf0  takeRestOfBeepers()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 while
\f0\b0 \cf0  (beepersPresent())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0pickBeeper();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf4 if
\f0\b0 \cf0  (frontIsClear())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0move();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\}\
\}\
}